network.online();
deftype Type;
deftype A;
deftype B;

def createGateway(a) {
    actor: { |a|
        import /.at.lang.futures;
        enableFutures(true);
        def m := reflectOnActor();
//        def fut;
        m.becomeMirroredBy: (extend: m with: {
            /*
            pub      *      sub
             A  <=>  B  <=>  C
            */
            def receive(receiver, msg) {
                if: (`resolveWithValue != msg.selector) then: {
                    system.println("Message from C to A");
                    def futureFromC := msg.future;
                    def futuredMsg := super^createMessage(msg.selector, msg.arguments, []);
                    when: (a <+ futuredMsg) becomes: {|val|
                        futureFromC<-resolveWithValue(val)@[/.at.lang.firstclassrefs.MetaMessage,
                                                    /.at.lang.futures.OneWayMessage];
                    }
                } else: {
                    system.println("Message from A to C");
                    super^receive(receiver, msg);
                }
            };
        });
    }
};

when: A discovered: { |a|
    system.println("A discovered");
    def gw := createGateway(a);
    export: gw as: B;
    system.println("Gateway actor exported");
}






/*
                    when: fut2 becomes: {|res|
                        (msg.future)<- resolveWithValue(res);
                    };
*/
