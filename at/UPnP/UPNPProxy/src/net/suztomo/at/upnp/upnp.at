import /.at.lang.futures;
def UPnPProxy := jlobby.net.suztomo.at.upnp.UPnPProxy;

def proxy := UPnPProxy.new();

/*
  AmbientTalk UPnP library.

  This library is sample program where
  AmbientTalk tries to communicate with UPnP devices.
  The library doesn't intent to implement entire specification.

  Usage:

  whenUPnP: Printer discovered: {|printer|
    p<-m1();
    when: p<-m2() becomes: {|resolvedValue|
      println(resolvedValue);
    }
  }

*/


/*
 Creates a Proxy Actor for a service.
 When upnpProxy finds a server it
   1. creates a proxy actor for the service,
   2. setups the actor methods according to the "description" of the service, and
   3. exports the actor as the Service
 The method innvocation on this proxy actor will
 be tlanslated to Java.
*/
network.online();

deftype UPnPService;


def UPnPModule := object: {
    def createAndExportProxyActor(serviceName, descriptionURL) {
        /* 1. creates actor */
        def sn := serviceName;
        def descURL := descriptionURL;
        def s := actor:{|sn, proxy, descURL|
            def serviceName := sn;
                        deftype UPnPService;
                        def UPnPServiceClass := jlobby.net.suztomo.at.upnp.UPnPService;
                        def service := UPnPServiceClass.new(sn, descURL);
            def getServiceName() { serviceName };
            def sendUPnPMessage(message, @args) {
                service.sendMessage(message, @args);
            };
            def p(a) {system.println(a)};


            def a := reflectOnActor();
            a.becomeMirroredBy: (extend: a with: {
                        def createMessage(sel, args, types) {
                            p("Creating Message");
                            system.println("  sel: " + sel);
                            super^createMessage(sel, args, types);
                        };
                        def invoke(slf, invocation) {
                            system.println("self : " + slf);
                            system.println("invo : " + invocation);
                            super^invoke(self, invocation);
                        };
                        def send(a,b) {
                            p("Sending:");
                            p("  1: " + a);
                            p("  2: " + b);
                            super^send(a,b);
                        };
                        def receive(receiver, msg) {
                            system.println("Received:");
                            p("  1: " + receiver);
                            p("  2: " + msg);
                            super^receive(receiver, msg);
                        }
                });
            /* 2. setups the actor */
                        /*
            proxy<-configureProxyActor(self);
                        system.println("exporting");
                        */
            /* 3. export the actor as the service */
            export: self as: UPnPService;
        }; // actor creation
    };

    /*
      @serivceName : Service Name to discover. If null, all service will be discovered.
    */
    def enableUPnPDiscover(serviceName := "Printer") {
      proxy.discover(serviceName, self);
    };

    /*
      serviceType : 
     */
    def whenUPnP: serviceName discovered: resolvedBlock {
        enableFutures(true);
        enableUPnPDiscover(serviceName);
        when: UPnPService discovered: { |proxyActor|
                system.println("proxyActor found");
            when: (proxyActor<-getServiceName()) becomes: {|discoveredName|
                if: (serviceName == discoveredName) then: {
                    resolvedBlock(proxyActor);
                }
            }
        }
    };

}
