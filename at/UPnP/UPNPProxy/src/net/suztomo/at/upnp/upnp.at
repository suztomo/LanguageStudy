import /.at.lang.futures;

/*
  Set your class path appropriately.
  e.g.
    export CLASSPATH=$CLASSPATH:../bin
 */
def UPnPProxy := jlobby.net.suztomo.at.upnp.ATUPnPProxy;

def ALL_SERVICE_KEYWORD := "_all_";
def proxy := UPnPProxy.new(ALL_SERVICE_KEYWORD);
system.println(proxy);


/*
  AmbientTalk UPnP library.

  This library is sample program where
  AmbientTalk tries to communicate with UPnP devices.
  The library doesn't intent to implement entire specification.

  Usage:

  whenUPnP: Printer discovered: {|printer|
    p<-m1();
    when: p<-m2() becomes: {|resolvedValue|
      println(resolvedValue);
    }
  }

*/


/*
 Creates a Proxy Actor for a service.
 When upnpProxy finds a server it
   1. creates a proxy actor for the service,
   2. setups the actor methods according to the "description" of the service, and
   3. exports the actor as the Service
 The method innvocation on this proxy actor will
 be tlanslated to Java.
*/
network.online();

deftype UPnPService;

/*
  Envelope: key value pair for communicating with UPnP services
*/
deftype UPnPEnvelope;

/*
  Error;
*/
deftype UPnPError;

def UPnPModule := object: {
    def envelope: defaultTable {
        def e := object: {
            def t := defaultTable;
            def init() {
            };
            def setValue(key, value) {
                t := t + [key, value]
            };
            def getValueFrom(key, index) {
                if: (index > t.length)
                then: {nil}
                else: {
                    if: (t[index] == key)
                    then: { t[index + 1] }
                    else: { getValueFrom(key, index + 2) }
                };
            };
            def getValue(key) {
                getValueFrom(key, 1);
            };
            def getTable() {
                t
            };
            def error() {
                getValue("__error__");
            }
        } taggedAs: [UPnPEnvelope];
        extendIsolate: e with: {};
    };
    /* envelope simple test */
    def e := envelope: ["default", 123];
    if: (nil != e.getValue("a")) then: {
        system.println("envelope error 1");
        system.println(e.getValue("a"));
    };
    if: ("default" == e.getValue("default")) then: {
        system.println("envelope error 1.1");
        system.println(e.getValue("default"));
    };
    e.setValue("a", 3);
    e.setValue("tomo", "string");
    if: (3 != e.getValue("a")) then: {
        system.println("envelope error 2");
        system.println(e.getValue("a"));
    };
    if: ("string" != e.getValue("tomo")) then: {
        system.println("envelope error 3");
        system.println(e.getValue("tomo"));
    };


    def ANY_UPNP_SERVICE := ALL_SERVICE_KEYWORD;
    def createAndExportProxyActor(serviceName, serviceArgs) {
        /* 1. creates actor */
        def sn := serviceName;
        def descURL := serviceArgs;
        def sargs := serviceArgs;
        def args := isolate: {|sargs|
            def getContents() {sargs};
        };
        def s := actor:{|sn, args|
            def serviceName := sn;
            deftype UPnPService;
            def UPnPServiceClass := jlobby.net.suztomo.at.upnp.ATUPnPService;
            def service := UPnPServiceClass.new(sn, args.getContents());
            def getServiceType() { service.getServiceType() };
            def sendUPnPMessage(message, envelope) {
                if: (is: envelope taggedAs: UPnPEnvelope)
                then: { service.sendMessage(message, envelope) }
                else: { envelope: ["__error__", "Arguments is not envelope"]}
            };
            def getActionNames() {
                service.getActionNames();
            };
            def p(a) {system.println(a)};
            def a := reflectOnActor();
            a.becomeMirroredBy: (extend: a with: {
                /*
                def createMessage(sel, args, types) {
                    p("Creating Message");
                    system.println("  sel: " + sel);
                    super^createMessage(sel, args, types);
                        };
                        def invoke(slf, invocation) {
                            system.println("self : " + slf);
                            system.println("invo : " + invocation);
                            super^invoke(self, invocation);
                        };
                        def send(a,b) {
                            p("Sending:");
                            p("  1: " + a);
                            p("  2: " + b);
                            super^send(a,b);
                        };
                        def receive(receiver, msg) {
                            system.println("Received:");
                            p("  1: " + receiver);
                            p("  2: " + msg);
                            super^receive(receiver, msg);
                        }
*/
            });
            /* 2. setups the actor */
                        /*
            proxy<-configureProxyActor(self);
                        system.println("exporting");
                        */
            /* 3. export the actor as the service */
            export: self as: UPnPService;
        };
    };

    /*
      @serivceName : Service Name to discover. If null, all service will be discovered.
    */
    def enableUPnPDiscover(serviceName := "Printer") {
        proxy.discover(serviceName, self);
    };

    /*
      serviceType : 
     */
    def whenUPnP: serviceName discovered: resolvedBlock {
        enableFutures(true);
        enableUPnPDiscover(serviceName);
        when: UPnPService discovered: { |proxyActor|
            if: (serviceName != ANY_UPNP_SERVICE) then: {
                when: (proxyActor<-getServiceType()) becomes: {|discoveredType|
                    if: (serviceName == discoveredType) then: {
                        resolvedBlock(proxyActor);
                    }
                }
            } else: { resolvedBlock(proxyActor) };
        }
    };
    
    def wheneverUPnP: serviceName discovered: resolvedBlock {
        enableFutures(true);
        enableUPnPDiscover(serviceName);
        whenever: UPnPService discovered: { |proxyActor|
            if: (serviceName != ANY_UPNP_SERVICE) then: {
                when: (proxyActor<-getServiceType()) becomes: {|discoveredType|
                    if: (serviceName == discoveredType) then: {
                        resolvedBlock(proxyActor);
                    }
                }
            } else: {
                resolvedBlock(proxyActor);
            }
        }
    };
}
